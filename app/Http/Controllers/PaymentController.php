<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Payment;

use App\Custom\Generic;
use App\UnitPurchase;
use Auth;

class PaymentController extends Controller
{   

    function __construct(){
        
        $this->generic = new Generic;
    }

    public function create(Request $request){
        $payment = new Payment;

        $payment->user_id = Auth::user()->id;
        $payment->reference = \Str::random(15).time();
        $payment->amount = (float)clean($request->amount);
        $payment->usd_value = (float)clean($request->amount)/500;
        $payment->description = clean($request->description);
        $payment->currency = clean($request->currency);
        $payment->gateway = clean($request->gateway);
        $payment->status = 'pending';
        $payment->paid_on = time();
        $payment->save();

        return json_encode(['status'=>'success', 'reference'=>$payment->reference, 'amount'=>$payment->amount]);
    }

    public function verifyRaveTransaction($ref){

        $curl = curl_init();

        curl_setopt_array($curl, array(
          CURLOPT_URL => 'https://api.flutterwave.com/v3/transactions/'.$ref.'/verify',
          CURLOPT_RETURNTRANSFER => true,
          CURLOPT_CUSTOMREQUEST => 'GET',
          CURLOPT_HTTPHEADER => array(
            'Content-Type: application/json',
            'Authorization: Bearer '.env('RAVE_SECRET_KEY'),
          ),
        ));

        $response = curl_exec($curl);

        $err = curl_error($curl);
        curl_close($curl);
        if ($err) {

            return $err;
        }else{
            return $response;
        }

    }


    public function update(Request $request){

         $payment = Payment::where('reference', $request->reference)->first();
         if ($payment->gateway == 'rave') {
            
            $verify = json_decode($this->verifyRaveTransaction($request->id));
           
            if (is_object($verify)) {

                if (property_exists($verify, 'status')) {
                    if ($verify->status=='success') {
                        if ($verify->data->amount==$payment->amount) {
                            $payment->status = 'successful';
                        }else{
                            $payment->status = 'suspicious';
                        }

                        $payment->transaction_id = $verify->data->tx_ref;
                        $payment->save();

                        if ($payment->status=='suspicious') {
                            $arr = [
                                'type'=>'payment manipulation',
                                'description'=>'The payment with reference '.$payment->reference.' is suspected to have been manipulated. The amount generated by our system ('.$payment->amount.') differs ith the amount returned by Flutterwave ('.$verify->data->amount.')',
                            ];
                            $this->generic->raiseSuspicion($arr);
                            
                        }elseif($payment->status=='successful'){
                            $payment->amount = $verify->data->amount;
                            $payment->save();

                            if ($payment->purpose = 'credit_purchase') {
                                $creditUnit = $this->createUnitPurchase($payment->id, $payment->amount);
                                if ($creditUnit['status'] == 'success') {
                                    Session(['msg'=>$creditUnit['data']->quantity.' units have been creditted to your account', 'alert'=>'success']);
                                    return json_encode(['status'=>'success']);
                                }
                            }
                        }
                    }else{
                        return json_encode(['status'=>'fail', 'message'=>'transaction not succesful', 'data'=>$verify]);
                    
                    }
                }else{
                    return json_encode(['status'=>'fail', 'message'=>'payment veriication endpoint returned no status', 'data'=>$verify]);
                }
            }else{
                 return json_encode(['status'=>'fail', 'message'=>'payment verification endpoint returned an invalid response', 'data'=>$verify]);
            }
         }
       
    }

    public function createUnitPurchase($payment_id, $amount){
        $quantity = $amount/siteSetting()->cost_per_unit;
        $unitPurchase = new UnitPurchase;

        $unitPurchase->payment_id = $payment_id;
        $unitPurchase->quantity = $quantity;
        $unitPurchase->user_id = Auth::user()->id;
        $unitPurchase->available_units = $quantity;
        $unitPurchase->save();

        return ['status'=>'success', 'data'=>$unitPurchase];
    }
}
